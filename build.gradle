/*
 Usage:
 gradle build - builds code and creates a single jar in build/libs/frostwire.jar
 gradle clean - cleans the build.
 gradle tasks - shows available tasks.

 gradle gettextExtract - extract all the strings from the sourcecode into frostwire.pot
 gradle gettextBundle  - create messages.jar with the extracted strings. 

*/
apply plugin: 'java'

sourceCompatibility = 1.7

compileJava {
    options.encoding = '8859_1'
}

repositories {
    mavenCentral()
}

// add third party jars to classpath.
dependencies {
    compile fileTree(dir: 'lib/jars', include: ['*.jar'])
    compile 'org.apache.ant:ant:1.9.6'
}

sourceSets {
    main {
        java {
            // frostwire-common
            srcDir 'frostwire-common/src/main/java'

            // jars-src (other third parties dependencies, we keep their sources
            // so that we can properly create the .deb sources for debian based mantainers
            // to corroborate we build entirely from source.)
            srcDir 'lib/jars-src/gettext-commons-0_9_5/src/java'
            exclude "**/ant/gettext/*.java"

            srcDir 'lib/jars-src/lucene-3.5.0'
            srcDir 'lib/jars-src/h2-1.4.186/src/main'
            srcDir 'lib/jars-src/jaudiotagger/src'
            srcDir 'lib/jars-src/metadata-extractor-2.6.2-src/Source'

            srcDir 'src'
        }

        resources {
            srcDir 'src'
            include '**/*.properties'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.html'
            include '**/*.js'
            include '**/*.sh'
            include '**/*.dat'
            include '**/*.icc'
            exclude '**/*.DS_Store'

            srcDir 'resources'
            include '**/*.properties'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.html'
            include '**/*.js'
            include '**/*.sh'
            include '**/*.dat'
            include '**/*.icc'
            exclude '**/*.DS_Store'
        }
    }
}

jar {
    archiveName = 'frostwire.jar'

    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF')

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'com.limegroup.gnutella.gui.Main'
    }
}

// gettext tasks

task gettextInit {
    description 'Loads and define the ant gettext related tasks'

    doLast {
        ant.taskdef(name: 'gettextExtract', classname: 'org.xnap.commons.ant.gettext.GettextExtractKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name: 'gettextMerge', classname: 'org.xnap.commons.ant.gettext.GettextMergeKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name: 'gettextGenerateDefault', classname: 'org.xnap.commons.ant.gettext.GenerateDefaultBundleTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name: 'gettextDist', classname: 'org.xnap.commons.ant.gettext.GettextDistTask', classpath: 'lib/jars/gettext-commons.jar')
    }
}

task gettextExtract {
    description 'Extracts message keys from the source code'

    doLast {
        println 'gettext extract...'
        ant.gettextExtract(keysFile: 'frostwire.pot',
                poDirectory: 'lib/messagebundles',
                keywords: '-kgetStringResource -kgetFormattedStringResource -ktrc -ktr -ktrn:1,2 -ktrl') {
            fileset(dir: "src") {
                include(name: '**/*.java')
            }
        }

        println 'gettext merge...'
        ant.gettextMerge(keysFile: "frostwire.pot", poDirectory: "lib/messagebundles")
    }
}

task gettextBundle {
    description 'Rebuilds messages and bundles them into messages.jar'

    doLast {
        // clean up
        println 'gettext bundle...'
        println 'cleaning up...'
        delete 'lib/messagebundles/org'

        // generate default bundle for complete messages
        println 'gettext generate default'
        ant.gettextGenerateDefault(targetBundle: 'org.limewire.i18n.Messages',
                outputDirectory: 'lib/messagebundles',
                potfile: 'lib/messagebundles/frostwire.pot')

        // generate complete bundles
        println 'gettext dist (complete bundles)'
        ant.gettextDist(targetBundle: 'org.limewire.i18n.Messages',
                poDirectory: 'lib/messagebundles',
                outputDirectory: 'lib/messagebundles',
                percentage: '35')

        // generate the empty en.po file without percentage
        println 'gettext dist (empty en.po file without percentage)'
        ant.gettextDist(targetBundle: 'org.limewire.i18n.Messages',
                outputDirectory: 'lib/messagebundles') {
            fileset(dir: 'lib/messagebundles') {
                include(name: 'en.po')
            }
        }

        // jar them
        println 'jar it...'
        ant.jar(destfile: 'lib/jars/messages.jar',
                basedir: 'lib/messagebundles',
                includes: "org/**")

        // clean up
        println 'cleaning up...'
        delete 'lib/messagebundles/org'
    }
}

gettextExtract.dependsOn gettextInit
gettextBundle.dependsOn gettextInit
